({    events: {        'click .mini-callbox': 'mini',        'click .close-callbox': 'close',        'click .save-callbox': 'save',        'change .result_callbox': 'changeFieldContent',        'change .description_callbox': 'changeFieldContent',        'keyup .description_callbox': 'changeFieldContent',        'change .recall_callbox': 'changeRecall',        'click .change_bean_callbox': 'changeBean',        'click .select_bean_callbox': 'selectBean',        'click .save_callbox': 'save',    },    selectBean: function (e) {        var _this = this;        var $this = $(e.currentTarget);        var $thisBox = $this.closest('.callbox');        App.drawer.open({            layout: 'selection-list',            context: {                module: $this.attr('data-bean-name')            }        }, function (model) {            if (!_.isEmpty(model)) {                app.api.call("update", app.api.buildURL('callcenter/getBeans'), {                    beanName: $this.attr('data-bean-name'),                    beanId: model.id,                    phoneNumber: ''                }, {                    success: function (res) {                        _this.currentData = _.first(res);                        var curBeanName = $thisBox.find('#beanName').val();                        var curId = $thisBox.find('#id').val();                        var curName = $thisBox.find('.link_to_bean').find('b').text();                        var tmp = '<li><a class="change_bean_callbox" data-id="' + curId + '" style="font-size: small;padding:3px">[' + curBeanName + '] ' + curName + '</a></li>';                        $thisBox.find('#list_change_bean_callbox').prepend(tmp);                        $thisBox.find('#id').val(_this.currentData.id);                        $thisBox.find('.link_to_bean').find('b').text(_this.currentData.name);                        $thisBox.find('.link_to_bean').attr('href', '#' + _this.currentData.beanName + '/' + _this.currentData.id);                        $thisBox.find('#beanName').val(_this.currentData.beanName);                        $thisBox.find('.beanName_displayheader').text(_this.currentData.beanName);                        $thisBox.find('#callStatus').text(_this.currentData.status);                        $thisBox.find('#callAddress').text((_.isEmpty(_this.currentData.address.address_state) ? '' : _this.currentData.address.address_state) + ', ' + (_.isEmpty(_this.currentData.address.address_city) ? '' : _this.currentData.address.address_city));                        //reset position callbox                        _this.initPosition($thisBox.attr('id'));                    }                });            }        });    },    changeBean: function (e) {        var _this = this;        var $thisSelect = $(e.currentTarget);        var $thisBox = $thisSelect.closest('.callbox');        _.each(window.beansCallbox["'" + $thisBox.attr('id') + "'"], function (item) {            if (item.id === $thisSelect.attr('data-id')) {                var curBeanName = $thisBox.find('#beanName').val();                var curId = $thisBox.find('#id').val();                var curName = $thisBox.find('.link_to_bean').find('b').text();                $thisSelect.remove();                var tmp = '<li><a class="change_bean_callbox" data-id="' + curId + '" style="font-size: small;padding:3px">[' + curBeanName + '] ' + curName + '</a></li>';                $thisBox.find('#list_change_bean_callbox').prepend(tmp);                $thisBox.find('#id').val(item.id);                $thisBox.find('.link_to_bean').find('b').text(item.name);                $thisBox.find('.link_to_bean').attr('href', '#' + item.beanName + '/' + item.id);                $thisBox.find('#beanName').val(item.beanName);                $thisBox.find('.beanName_displayheader').text(item.beanName);                $thisBox.find('#callStatus').text(item.status);                $thisBox.find('#callAddress').text((_.isEmpty(item.address.address_state) ? '' : item.address.address_state) + ', ' + (_.isEmpty(item.address.address_city) ? '' : item.address.address_city));                _this.initPosition($thisBox.attr('id'));            }        });    },    changeFieldContent: function (e) {        var thisBox = $(e.currentTarget).closest('.callbox');        if (!_.isEmpty(thisBox.find('.result_callbox').val()) && !_.isEmpty(thisBox.find('.description_callbox').val())) {            this.setEnabledButtonSave(thisBox);        } else {            this.setDisabledButtonSave(thisBox);        }    },    changeRecall: function (e) {        var $thisBox = $(e.currentTarget).closest('.callbox');        if ($(e.currentTarget).val() === "99999") $thisBox.find('.timerecall_callbox').show();        else $thisBox.find('.timerecall_callbox').hide();        this.initPosition($thisBox.attr('id'));    },    setDisabledButtonSave: function (thisBox) {        thisBox.find('.save_callbox').prop('disabled', true);    },    setEnabledButtonSave: function (thisBox) {        thisBox.find('.save_callbox').prop('disabled', false);    },    initialize: function (options) {        this._super('initialize', [options]);        this.context.set('skipFetch', true);        var _this = this;        app.api.call("update", app.api.buildURL('callcenter/getBeans'), {            beanName: options.data.beanName,            beanId: options.data.beanId,            phoneNumber: options.data.phoneNumber        }, {            success: function (res) {                if (res.length === 0) {                    _this.data = [{                        id: '',                        name: '',                        beanName: '',                        status: '',                        phoneNumber: '',                        email: '',                        address: {                            address_street: '',                            address_state: '',                            address_city: '',                            address_country: ''                        }                    }];                } else {                    _this.currentData = _.first(res);                    _this.timenow = new Date().getTime();                    var hasBox = false;                    $('.callbox').each(function () {                        var $thisBox = $(this);                        if ($thisBox.find('#id').val() === _this.currentData.id && $thisBox.find('#phoneNumber').val() === _this.currentData.phoneNumber) {                            hasBox = true;                        }                    });                    if (hasBox === false) {                        _this.data = _.rest(res);                        if (_.isEmpty(window.beansCallbox)) window.beansCallbox = {};                        window.beansCallbox["'" + _this.timenow + "'"] = res;                        _this.lang = {                            call_purpose_options: app.lang.getAppListStrings('call_purpose_options'),                            call_result_options: app.lang.getAppListStrings('call_result_options'),                            calls_recall_options: app.lang.getAppListStrings('calls_recall_options')                        };                        if (typeof options.call_status != "undefined") _this.currentData.call_status = options.call_status;                        else _this.currentData.call_status = "Waiting";                        if (typeof options.call_direction != "undefined") _this.currentData.direction = options.call_direction;                        else _this.currentData.direction = "Outbound";                        _this.render();                        $('#footer .btn-toolbar').append(_this.$el);                        $thisBox = $('#' + _this.timenow);                        //init datepicker                        var lang = app.lang.getLanguage().substr(0, 2) === 'vn' ? 'vi' : App.lang.getLanguage().substr(0, 2);                        $.tdtpicker.setLocale(lang);                        $thisBox.find('.recall_at_callbox').tdtpicker({                            format: app.user.getPreference('datepref') + ' ' + app.user.getPreference('timepref'),                            dayOfWeekStart: parseInt(app.user.getPreference('first_day_of_week'), 10),                            step: 15,                            minDate: '-1970/01/01'                        });                        //reset position callbox                        _this.initPosition(_this.timenow);                    }                }            }        });    },    mini: function (e) {        var $thisBox = $(e.currentTarget).closest('.callbox');        if ($thisBox.find('.popover-content').is(':visible')) {            $thisBox.find('.popover-content').hide();            $thisBox.find('.mini-callbox').removeClass('fa-chevron-down').addClass('fa-chevron-up').attr('data-original-title', 'max');            $thisBox.find('.select_heading_callbox').hide();            $thisBox.find('.beanName_displayheader').hide();            $thisBox.find('.close-callbox').hide();            $thisBox.find('#table_info_callbox').hide();            var tmp = '<span class="pull-left beanName_displayheader_tmp" style="margin-left:5px;font-size: 14px"><i class="far fa-phone-alt"></i> ' + $thisBox.find('.link_to_bean').find('b').text() + '</span>';            $thisBox.find('.beanName_displayheader').parent().prepend(tmp);            this.initPosition($thisBox.attr('id'));        } else {            $thisBox.find('.popover-content').show();            $thisBox.find('.mini-callbox').removeClass('fa-chevron-up').addClass('fa-chevron-down').attr('data-original-title', 'min');            $thisBox.find('.beanName_displayheader_tmp').remove();            $thisBox.find('.close-callbox').show();            $thisBox.find('.select_heading_callbox').show();            $thisBox.find('.beanName_displayheader').show();            $thisBox.find('#table_info_callbox').show();            this.initPosition($thisBox.attr('id'));        }    },    close: function (e) {        var thisBox = $(e.currentTarget).closest('.callbox');        app.alert.show('confirmation', {            title: ' ',            level: 'confirmation',            messages: 'Are you sure to close this call box?',            onConfirm: function () {                thisBox.remove();            }        });    },    initPosition: function (id) {        var $this = $('#' + id);        $this.css('left', $(window).width() - $this.width() - 16);        $this.css('top', -2 - $this.height());    },    save: function (e) {        var _this = this;        var $thisBox = $(e.currentTarget).closest('.callbox');        _this.setDisabledButtonSave($thisBox);        $thisBox.find('.save_callbox').html('<i style="color:white !important;" class="fa fa-spinner fa-spin"></i>');        //time        var dt = $thisBox.find('.recall_at_callbox').tdtpicker('getValue');        dt = dt.toISOString();        dt = dt.replace('T', ' ');        dt = dt.replace('Z', '');        dt = dt.substr(0, 19);        var data = {            callId: $thisBox.find('#callId').val(),            source: $thisBox.find('#source').val(),            recording: $thisBox.find('#recording').val(),            phoneNumber: $thisBox.find('#phoneNumber').val(),            ext: $thisBox.find('#ext').val(),            direction: $thisBox.find('#direction').val(),            callResult: $thisBox.find('.result_callbox').val(),            callPurpose: $thisBox.find('.purpose_callbox').val(),            deadlead: $thisBox.find('#deadlead_callbox').is(':checked') ? 1 : 0,            favorite: $thisBox.find('#favorite_callbox').is(':checked') ? 1 : 0,            id: $thisBox.find('#id').val(),            beanName: $thisBox.find('#beanName').val(),            description: $thisBox.find('.description_callbox').val(),            recall: $thisBox.find('.recall_callbox').val(),            recall_at: dt,            start: $thisBox.find('#start').val(),            end: $thisBox.find('#end').val(),            duration: $thisBox.find('#duration').val()        };        if(data.callId=='') data.callId=$thisBox.attr('id');        //set default for some field if empty        if (_.isEmpty(data.start)) {            var tmp = new Date();            tmp = tmp.getFullYear() + '-' + (tmp.getMonth() + 1) + '-' + tmp.getDate() + ' ' + tmp.getHours() + ':' + tmp.getMinutes() + ':' + tmp.getSeconds();            data.start = tmp;        }        console.log(data);        //call api to save        app.api.call("update", App.api.buildURL('callcenter/save'), data, {                success: function (res) {                    window.call_saving = false;                    if (res.success) {                        if ($thisBox.find('.save_callbox').attr('data-is-auto-save') === '0') {                            //$thisBox.remove();                        } else {                            $thisBox.find('.save_callbox').attr('data-is-auto-save', '0');                        }                        toastr.success('Call log ' + data.phoneNumber + ' saved');                    } else {                        toastr.error('Call log ' + data.phoneNumber + ' not be saved');                    }                    $thisBox.find('.save_callbox').text('Save');                    if (!_.isEmpty($thisBox.find('.result_callbox').val()) && !_.isEmpty($thisBox.find('.description_callbox').val())) {                        _this.setEnabledButtonSave($thisBox);                    } else {                        _this.setDisabledButtonSave($thisBox);                    }                }            }        );    }})